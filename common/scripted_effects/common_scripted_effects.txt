Switch_Legacy_of_Deroboticization = {
	meta_effect = {
		text = {
			FROM = {
				if = {
					limit = {
						check_variable = {
							legacy_of_deroboticization_level > 0
						}
					}
					if = {
						limit = {
							has_idea = Legacy_of_Deroboticization_[OLD_LEVEL]
						}
						swap_ideas = {
                            add_idea = Legacy_of_Deroboticization_[NEW_LEVEL]
                            remove_idea = Legacy_of_Deroboticization_[OLD_LEVEL]
                        }
					}
				}
                else = {
                    remove_idea = Legacy_of_Roboticization_1
                }
			}
		}
		OLD_LEVEL = "[?legacy_of_deroboticization_level|.0]"
		NEW_LEVEL = "[?legacy_of_deroboticization_level_new|.0]"
	}
}

Switch_Idea_Level = {
    # Variables:
    # si_idea: Idea name token
    # si_idea_level_var: Idea level variable
    # si_new_level: New idea level
	meta_effect = {
		text = {
			FROM = {
                if = {
                    limit = {
                        check_variable = {
                            [IDEA_LEVEL_NAME] > 0
                        }
                    }

                    remove_ideas = [IDEA_NAME]_[CURRENT_LEVEL]
                    add_ideas = [IDEA_NAME]_[NEW_LEVEL]
                    
                }
                else = {
                    remove_ideas = [IDEA_NAME]_[CURRENT_LEVEL]
                }
                set_variable = { [IDEA_LEVEL_NAME] = [NEW_LEVEL] }
			}
		}

        IDEA_NAME = "[?si_idea.GetIdeaName]"
        IDEA_LEVEL_NAME = "[?si_idea_level_var.GetIdeaLevelVariable]"
        CURRENT_LEVEL = "[?si_idea_level_var|.0]"
		NEW_LEVEL = "[?si_new_level|.0]"
	}
}

Enable_Trade_Embargo = {
    meta_effect = {
		text = {
			[EMBARGO_TARGET] = {
                add_opinion_modifier = {
                    target = [EMBARGO_INITIATOR]
                    modifier = Trade_Embargo
                }
            }
            [EMBARGO_INITIATOR] = {
                add_opinion_modifier = {
                    target = [EMBARGO_TARGET]
                    modifier = Trade_Embargo_Opinion
                }
            }
		}
		EMBARGO_TARGET = "[?embargo_target.GetTag]"
		EMBARGO_INITIATOR = "[?embargo_initiator.GetTag]"
	}
}

Disable_Trade_Embargo = {
    meta_effect = {
		text = {
			[EMBARGO_TARGET] = {
                remove_opinion_modifier = {
                    target = [EMBARGO_INITIATOR]
                    modifier = Trade_Embargo
                }
            }
            [EMBARGO_INITIATOR] = {
                remove_opinion_modifier = {
                    target = [EMBARGO_TARGET]
                    modifier = Trade_Embargo_Opinion
                }
            }
		}
		EMBARGO_TARGET = "[?embargo_target.GetTag]"
		EMBARGO_INITIATOR = "[?embargo_initiator.GetTag]"
	}
}

Switch_Trade_Embargo = {
    if = {
        limit = {
            check_variable = {
                opinion_modifier_action = 0
            }
        }
        Disable_Trade_Embargo = yes
    }
    else = {
        Enable_Trade_Embargo = yes
    }
    clear_variable = opinion_modifier_action
    clear_variable = embargo_target
    clear_variable = embargo_initiator
}

Invite_Into_Faction = {
    # ROOT denotes a faction leader scope;
    # THIS denotes a target;
    # Call this script from the target scope,
    # incapsulating it into faction leader scope.
    
    THIS = {
        country_event = shared.3
    }
}

Guarantee_Independence = {
    # ROOT denotes a guarantee country;
    # THIS denotes a target;
    # Call this script from the target scope,
    # incapsulating it into guarantee scope.

    THIS = {
        country_event = shared.7
    }
}

Guarantee_Independence_And_Build_Structures = {
    # ROOT denotes a guarantee country;
    # THIS denotes a target;
    # Call this script from the target scope,
    # incapsulating it into guarantee scope.

    THIS = {
        country_event = shared.8
    }
}

Negotiate_About_Non_Aggression = {
    # ROOT denotes a non-aggression pact proposer;
    # THIS denotes a target;
    # Call this script from the target scope,
    # incapsulating it into the proposer scope.

    THIS = {
        country_event = shared.9
    }
}

Offer_Derobotization = {
    # ROOT denotes a derobotization proposer;
    # THIS denotes a target;
    # Call this script from the target scope,
    # incapsulating it into ROOT scope.

    THIS = {
        country_event = shared.13
    }
}

Fortificate_Borders_Against_Reds = {
    # Fortificates target country's borders with
    # another target country;
    # THIS denotes a country to defend from;
    # FROM denotes a country that builds up forts
    # to defent itself;
    # Call this script, incapsulating it into two
    # scopes like that:
    # DEFENDER = { TARGET = { Fortificate_Borders } }

    THIS = {
        every_owned_state = {
            limit = {
                any_neighbor_state = {
                    OR = {
                        is_core_of = RCR
                        is_core_of = NWC
                        is_core_of = WEC
                        is_core_of = SOC
                    }
                    
                }
            }
            add_building_construction = {
                type = bunker
                level = 3
                instant_build = yes
                province = {
                    limit_to_border = yes
                }
            }
            add_building_construction = {
                type = anti_air_building
                level = 3
                instant_build = yes
            }
        }
    }
}

Steal_Rings_Random = {
    randomize_temp_variable = {
        var = rings_steal_temp
        distribution = uniform
        min = 1
        max = 500
    }
    round_temp_variable = rings_steal_temp
    set_variable = { 
        rings_steal_amount = rings_steal_temp
    }
    THIS = {
        
    }
}

Steal_Rings = {
    meta_effect = {
		text = {
			subtract_from_variable = {
                THIS.rings = [RINGS_AMOUNT]
            }
            add_to_variable = {
                ROOT.rings = [RINGS_AMOUNT]
            }
            clear_variable = steal_rings_amount
		}
		RINGS_AMOUNT = "[?steal_rings_amount|.0]"
	}
}